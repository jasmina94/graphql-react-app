{"version":3,"sources":["logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","style","marginRight","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","item","LAUNCH_QUERY","Launch","useParams","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","renderLaunch","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","src","logo","alt","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8586251b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.9bf807c0.jpg\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission:\r\n                        <span className={classNames({\r\n                            'text-success': launch_success,\r\n                            'text-danger': !launch_success\r\n                        })}>{mission_name}\r\n                        </span></h4>\r\n                    <p>Date:\r\n                        <Moment format=\"YYYY-MM-DD HH:mm\">\r\n                            {launch_date_local}\r\n                        </Moment>\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 bg-success\" style={{ marginRight: 10 }} /> = Succes\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 bg-danger\" style={{ marginRight: 10 }} /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Launches() {\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n\r\n    const renderLaunches = () => {\r\n        if (loading)\r\n            return <h4>Loading...</h4>\r\n\r\n        if (error) {\r\n            console.log(error);\r\n        } else {\r\n            return <>\r\n                {data.launches.map((item) => {\r\n                    return <LaunchItem key={item.flight_number} launch={item} />\r\n                })}\r\n            </>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4 my-3\">Launches</h1>\r\n            <MissionKey />\r\n            {renderLaunches()}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_date_local\r\n            launch_success\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Launch() {\r\n    let { flight_number } = useParams();\r\n    flight_number = parseInt(flight_number);\r\n\r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n        variables: { flight_number }\r\n    });\r\n\r\n    const renderLaunch = () => {\r\n        if (loading) return <h4>Loading...</h4>\r\n        if (error) console.log(error)\r\n\r\n        const { mission_name, flight_number, launch_year, launch_date_local, launch_success,\r\n            rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\r\n\r\n        return <div>\r\n            <h1 className=\"display-4 my-3\">\r\n                <span className=\"text-dark\">Mission: </span>\r\n                {mission_name}\r\n            </h1>\r\n            <h4 className=\"mb-3\">\r\n                Launch Details\r\n            </h4>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">\r\n                    Flight number: {flight_number}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    Launch year: {launch_year}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    Launch successful: <span className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                    })}>{launch_success ? 'Yes' : 'No'}</span>\r\n                </li>\r\n            </ul>\r\n            <h4 className=\"my-3\">Rocket details</h4>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">\r\n                    Rocket id: {rocket_id}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    Rocket name: {rocket_name}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    Rocket type: {rocket_type}\r\n                </li>\r\n            </ul>\r\n            <hr />\r\n            <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {renderLaunch()}\r\n        </>\r\n    )\r\n}\r\n","import 'bootswatch/dist/cyborg/bootstrap.min.css';\nimport './App.css';\nimport logo from './logo.jpg';\nimport Launches from './components/Launches';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloProvider, InMemoryCache } from '@apollo/react-hooks';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}